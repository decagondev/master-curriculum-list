<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imsglobal.org/xsd/ims_qtiasiv1p2 http://www.imsglobal.org/xsd/ims_qtiasiv1p2p1.xsd">
  <assessment ident="gb2466ff173c31b286f8105f092752c6a" title="Intro to Node.js &amp; Express Check For Understanding">
    <qtimetadata>
      <qtimetadatafield>
        <fieldlabel>cc_maxattempts</fieldlabel>
        <fieldentry>unlimited</fieldentry>
      </qtimetadatafield>
    </qtimetadata>
    <section ident="root_section">
      <item ident="g8dbea09d6a92467277fe27de533c88f2" title="c37dfb76-245d-4772-8a27-3867c12c9cf9">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>1.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>9061,6220,1790,87</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gf47b767d37e06559ff801f2d253307ba</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;Which of the following would be the proper syntax for a request handler function?&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="9061">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(req, res) =&amp;gt; { res.status(200).json({ hello: 'Lambda Llamas' }); }&lt;/code&gt;</mattext>
                </material>
              </response_label>
              <response_label ident="6220">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(res, req) =&amp;gt; { res.status(200).json({ hello: 'Lambda Llamas' }); }&lt;/code&gt;</mattext>
                </material>
              </response_label>
              <response_label ident="1790">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(req, res) =&amp;gt; { res(200).json({ hello: 'Lambda Llamas' }); }&lt;/code&gt;</mattext>
                </material>
              </response_label>
              <response_label ident="87">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(req, res) =&amp;gt; { req.status(200).json({ hello: 'Lambda Llamas' }); }&lt;/code&gt;</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">6220</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="6220_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1790</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1790_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">87</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="87_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">9061</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="general_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/plain">The handler function correctly names the parameters as `req` and `res`. In the body of the function, the `status` method and the `json` method are both correctly called and chained on the `res` object.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="6220_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">The first parameter in the request handler function should be the request object (&lt;code&gt;req&lt;/code&gt;). The second parameter should be the response object (&lt;code&gt;res&lt;/code&gt;). So, even though the body of the function is correct, the object assigned to the name &lt;code&gt;res&lt;/code&gt; is actually the request object, which means this code will not work correctly.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1790_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">In this code, even though &lt;code&gt;res&lt;/code&gt; is an object, it is being treated as a function. The &lt;code&gt;status&lt;/code&gt; function on the &lt;code&gt;res&lt;/code&gt; object should in fact be the thing being called and 200 should be passed into that.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="87_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">In this code, the &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; methods are being called on the &lt;code&gt;req&lt;/code&gt; object. Instead, these methods should be called and chained on the &lt;code&gt;res&lt;/code&gt; object.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g8b975911a27aaed8945ea90357617539" title="e041f629-4e2b-4d22-a1ae-8e852d66d443">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>1.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>8484,7962,8393,6049</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gf47b767d37e06559ff801f2d253307ba</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Correctly add two HTTP status codes for the following endpoint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;server.post("/students", (req, res) =&amp;gt; {
    Students.add(req.body)
        .then(student =&amp;gt; {
            res.status(___).json({ data: student });
        })
        .catch(error =&amp;gt; {
            res.status(___).json({ message: error.message });
        });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="8484">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(201, 500)&lt;/code&gt;</mattext>
                </material>
              </response_label>
              <response_label ident="7962">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(200, 400)&lt;/code&gt;</mattext>
                </material>
              </response_label>
              <response_label ident="8393">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(200, 500)&lt;/code&gt;</mattext>
                </material>
              </response_label>
              <response_label ident="6049">
                <material>
                  <mattext texttype="text/html">&lt;code&gt;(201, 300)&lt;/code&gt;</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">7962</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="7962_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">8393</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="8393_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">6049</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="6049_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">8484</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="general_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">The `201 Created` status code signifies that the request has been fulfilled and resulted in a new resource being created. The response should contain a reference to the newly created resource.

The `Internal Error 500` status code means that the server encountered an unexpected condition which prevented it from fulfilling the request.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="7962_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The &lt;code&gt;200 OK&lt;/code&gt; status code signifies that the request has succeeded. However, with a POST request , the &lt;code&gt;201 Created&lt;/code&gt; status code is more accurate as a response to signify that the new resource has been created.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;400 Bad Request&lt;/code&gt; status code indicates that the server cannot or will not process the request due to something that the server thinks is a client error. Examples include using the wrong request syntax or deceptive request routing.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="8393_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The &lt;code&gt;200 OK&lt;/code&gt; status code signifies that the request has succeeded. However, with a POST request , the &lt;code&gt;201 Created&lt;/code&gt; status code is more accurate as a response to signify that the new resource has been created.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Internal Error 500&lt;/code&gt; status code means that the server encountered an unexpected condition which prevented it from fulfilling the request.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;200&lt;/code&gt; portion of the answer is incorrect. The first response code should be &lt;code&gt;201 Created&lt;/code&gt;. The &lt;code&gt;500&lt;/code&gt; portion of the answer is correct.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="6049_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The &lt;code&gt;201 Created&lt;/code&gt; status code signifies that the request has been fulfilled and resulted in a new resource being created. The response should contain a reference to the newly created resource.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;300 Multiple Choices&lt;/code&gt; redirect status response code signifies that the request has more than one possible response. The client user should choose one of them. However, there is no standardized way of choosing a response, so this response code is extremely rare to use.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;201&lt;/code&gt; portion of this answer is correct. The &lt;code&gt;300&lt;/code&gt; portion is incorrect. The second status code should be &lt;code&gt;Internal Error 500&lt;/code&gt;.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g18d35ff605452da4fd8b2f9e57fa6ab9" title="5966c9f0-7571-4025-9118-c79d9442b1b7">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>1.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>9112,2,9802,1990</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gf47b767d37e06559ff801f2d253307ba</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;When successfully creating a resource what is the correct HTTP Status code for the response?&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="9112">
                <material>
                  <mattext texttype="text/plain">201</mattext>
                </material>
              </response_label>
              <response_label ident="2">
                <material>
                  <mattext texttype="text/plain">200</mattext>
                </material>
              </response_label>
              <response_label ident="9802">
                <material>
                  <mattext texttype="text/plain">202</mattext>
                </material>
              </response_label>
              <response_label ident="1990">
                <material>
                  <mattext texttype="text/plain">204</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">2</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="2_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">9802</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="9802_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1990</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1990_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">9112</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="general_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/plain">The `201 Created` status code signifies that the request has been fulfilled and resulted in a new resource being created. The response should contain a reference to the newly created resource.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="2_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">The &lt;code&gt;200 OK&lt;/code&gt; status code signifies that the request has succeeded. However, with a POST request , the &lt;code&gt;201 Created&lt;/code&gt; status code is more accurate as a response to signify that the new resource has been created.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="9802_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The &lt;code&gt;Accepted 202&lt;/code&gt; status code signifies that the request has been accepted for processing but the processing has not yet been completed. The response means that the request may or may not be eventually acted upon. The request could be disallowed once the processing actually takes place.&lt;/p&gt;
&lt;p&gt;This is an incorrect answer because we want the status code that signifies that the request was completed and that we've passed upon a reference to the newly created resource in the body of the response.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1990_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The &lt;code&gt;204 No Content&lt;/code&gt; status code signifies that the server fulfilled the request but does not need to return any payload in the body of the response.&lt;/p&gt;
&lt;p&gt;This is incorrect, we actually do want to include a reference to the newly created resource in the body of the response. Therefore, this is not an accurate status code for the situation.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g9871b3c44c2ba0334df6b467f71a3161" title="9a88590d-a399-4748-85ba-8e39ae2d61e2">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>1.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>5342,2021,3015,890</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gf47b767d37e06559ff801f2d253307ba</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Complete the following endpoint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;server.put("/students/:id", (req, res) =&amp;gt; {
    const changes = req.___;
    const id = req.___.id;
    Students.update(id, changes)
        .then(student =&amp;gt; {
            res.status(200).json({ data: student });
        })
        .catch(error  =&amp;gt; {
            res.status(500).json({ message: error.message });
        });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="5342">
                <material>
                  <mattext texttype="text/plain">body, params</mattext>
                </material>
              </response_label>
              <response_label ident="2021">
                <material>
                  <mattext texttype="text/plain">params, body</mattext>
                </material>
              </response_label>
              <response_label ident="3015">
                <material>
                  <mattext texttype="text/plain">body, url</mattext>
                </material>
              </response_label>
              <response_label ident="890">
                <material>
                  <mattext texttype="text/plain">data, params</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">2021</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="2021_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">3015</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="3015_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">890</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="890_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">5342</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="general_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">In a PUT request, the client is modifying an existing resource. The client is expected to send along the updated resource in the body of the request.

In order to get the id of the resource that we are updating, we need to look at the params of the endpoint.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="2021_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">While we do in fact need to look at &lt;code&gt;req.params&lt;/code&gt; and &lt;code&gt;req.body&lt;/code&gt;, this answer has these in the reverse order. In order to get the updated resource, the client is expected to send that along in the body of the request. In order to get the id, we need to access the &lt;code&gt;id&lt;/code&gt; attribute on the &lt;code&gt;params&lt;/code&gt; object.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="3015_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;In a PUT request, the client is modifying an existing resource. The client is expected to send along the updated resource in the body of the request.&lt;/p&gt;
&lt;p&gt;The request object does not contain a &lt;code&gt;url&lt;/code&gt; attribute. The correct attribute to access the parameters of the url is the &lt;code&gt;params&lt;/code&gt; attribute on the request object.&lt;/p&gt;
&lt;p&gt;The body portion of this answer is correct. The url portion is incorrect.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="890_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The request object does not contain a &lt;code&gt;data&lt;/code&gt; attribute. The payload of the request is accessed on the &lt;code&gt;body&lt;/code&gt; attribute of the request object.&lt;/p&gt;
&lt;p&gt;In order to get the id of the resource that we are updating, we need to look at the params of the endpoint.&lt;/p&gt;
&lt;p&gt;The data portion of this answer is incorrect. The params portion is correct.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g1ffa983e0c517fa1993f558f769b28da" title="1844e0d8-1a74-4de5-abff-0ce5ee7ef415">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>1.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>9241,838,4156,1104</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gf47b767d37e06559ff801f2d253307ba</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Complete the following endpoint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;server.get("/api/users", async (req, res) =&amp;gt; {
  try {
    const users = _____ User.find();
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="9241">
                <material>
                  <mattext texttype="text/plain">await</mattext>
                </material>
              </response_label>
              <response_label ident="838">
                <material>
                  <mattext texttype="text/plain">let</mattext>
                </material>
              </response_label>
              <response_label ident="4156">
                <material>
                  <mattext texttype="text/plain">const</mattext>
                </material>
              </response_label>
              <response_label ident="1104">
                <material>
                  <mattext texttype="text/plain">promise</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">838</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="838_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">4156</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="4156_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1104</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1104_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">9241</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="general_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">The `await` operator is used to wait for a Promise. It can only be used inside an async block. The `await` keyword makes JavaScript wait until the promise returns a result.

In this code, `User.find()` is fetching data from a database and is a method that returns a promise. In order to write our code in this synchronous style, we need to use the await keyword to signify that we want to wait until the promise resolves before moving on to the rest of the statements in the code block.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="838_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">the &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; keyword is always found on the left-hand side of the assignment statement. Including these keyword on the right-hand side of the assignment statement would cause an error.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="4156_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">the &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; keyword is always found on the left-hand side of the assignment statement. Including these keyword on the right-hand side of the assignment statement would cause an error.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1104_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;code&gt;promise&lt;/code&gt; is not a keyword in JavaScript. By including &lt;code&gt;promise&lt;/code&gt; in this section of your code, JavaScript would attempt to resolve the name to a value and this would cause an error.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="gc8460bc44e7bfcf6b46a7efb7d3f82c7" title="7e392bfa-7e94-48da-aff5-b77e19372994">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>1.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>177,8368,8932,1501</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gf47b767d37e06559ff801f2d253307ba</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;In order for your module project to successfully pass the tests, you were required to include &lt;code&gt;server.use(express.json())&lt;/code&gt; when you set up your Express server.&lt;/p&gt;
&lt;p&gt;Choose the answer that best describes why this line was necessary.&lt;/p&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="177">
                <material>
                  <mattext texttype="text/plain">This line is necessary so that our express application will parse JSON payloads found inside incoming request objects.</mattext>
                </material>
              </response_label>
              <response_label ident="8368">
                <material>
                  <mattext texttype="text/plain">In order to let the test framework know that we expect the requests used in our tests to send JSON objects.</mattext>
                </material>
              </response_label>
              <response_label ident="8932">
                <material>
                  <mattext texttype="text/html">This line is not necessary. It is common practice to include it, but we didn't actually need to include it in order to get our tests to pass.</mattext>
                </material>
              </response_label>
              <response_label ident="1501">
                <material>
                  <mattext texttype="text/plain">This line is necessary in order to start our express server.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">8368</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="8368_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">8932</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="8932_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1501</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1501_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">177</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="general_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/plain">`express.json()` is a built-in middleware function in Express. `server.use()` is a method on the express application object where you can set up the desired middleware for your application. By passing `express.json()` into `server.use()` we are telling our express application to recognize incoming request objects as JSON objects.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="8368_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;This line is agnostic of our test framework and isn't communicating with or configuring the test framework in any way.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;express.json()&lt;/code&gt; is a built-in middleware function in Express. &lt;code&gt;server.use()&lt;/code&gt; is a method on the express application object where you can set up the desired middleware for your application. By passing &lt;code&gt;express.json()&lt;/code&gt; into &lt;code&gt;server.use()&lt;/code&gt; we are telling our express application to recognize incoming request objects as JSON objects.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="8932_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/plain">This is line is, in fact, necessary in order to pass our tests. If it is not included, then our express application doesn't know how to process the JSON objects that our tests will be passing to the server with their requests.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1501_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">This line does not start the express server. Calling &lt;code&gt;server.listen()&lt;/code&gt; in our &lt;code&gt;index.js&lt;/code&gt; file is the line that actually starts the server and enables it to listen for requests on a certain port.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g69f076c81fd0e7af82f5ba45d11b2af8" title="c0633158-7e8d-43b2-b5e9-eb929a12e324">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>1.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>5353,9366,7039,2030</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gf47b767d37e06559ff801f2d253307ba</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;The code block below contains three blanks (&lt;code&gt;_____&lt;/code&gt;). Choose the answer that has the correct three status codes in the correct order.&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;server.delete('/api/users/:id', (req, res) =&amp;gt; {
  let user
  User.findById(req.params.id)
    .then(data =&amp;gt; {
      if (!data) {
        res.status(_____).json({
          message: 'The user with the specified ID does not exist',
        });
      } else {
        user = data
        return User.remove(req.params.id)
      }
    })
    .then(() =&amp;gt; {
      res.status(_____).json(user);
    })
    .catch(() =&amp;gt; {
      res.status(_____).json({ message: 'The user could not be removed' });
    });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="5353">
                <material>
                  <mattext texttype="text/plain">404, 200, 500</mattext>
                </material>
              </response_label>
              <response_label ident="9366">
                <material>
                  <mattext texttype="text/plain">200, 200, 500</mattext>
                </material>
              </response_label>
              <response_label ident="7039">
                <material>
                  <mattext texttype="text/plain">500, 200, 500</mattext>
                </material>
              </response_label>
              <response_label ident="2030">
                <material>
                  <mattext texttype="text/plain">404, 201, 500</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">9366</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="9366_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">7039</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="7039_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">2030</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="2030_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">5353</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="general_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">The `404 Not Found` HTTP status code means the resource that the client is requesting was not found by the server. This is the correct status code here because the id that the client was trying to delete did not exist in the database.

The `200 OK` status code indicates that the request has succeeded. This is the correct response after the user has been deleted because we want to let the client know that their request was completed successfully but there is no payload to pass back to the client.

The `Internal Error 500` status code means that the server encountered an unexpected condition which prevented it from fulfilling the request. This is the correct response for the catch block because there was some internal error that prevented the user from being deleted from the database.</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="9366_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The first status code should be &lt;code&gt;404 Not Found&lt;/code&gt;, not &lt;code&gt;200 OK&lt;/code&gt;. The &lt;code&gt;200 OK&lt;/code&gt; status code indicates that the request succeeded. But, in this case, the request did not succeed because the user with the id that the client provided was not found in the database and thus could not be deleted.&lt;/p&gt;
&lt;p&gt;The second response (&lt;code&gt;200&lt;/code&gt;) and the third response (&lt;code&gt;500&lt;/code&gt;) are both correct in this answer.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="7039_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;The first status code should be &lt;code&gt;404 Not Found&lt;/code&gt;, not &lt;code&gt;Internal Error 500&lt;/code&gt;. The &lt;code&gt;500&lt;/code&gt; status code would not be appropriate here. The server did not encounter an error or throw an exception, it simply couldn't find the resource to delete that the client specified. By responding with &lt;code&gt;404 Not Found&lt;/code&gt;, this is a much more accurate message to the client.&lt;/p&gt;
&lt;p&gt;The second response (&lt;code&gt;200&lt;/code&gt;) adn the third response (&lt;code&gt;500&lt;/code&gt;) are both correct in this answer.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="2030_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;code&gt;404&lt;/code&gt; is the correct status code for the first response.&lt;/p&gt;
&lt;p&gt;For the second response, the correct answer is &lt;code&gt;200&lt;/code&gt;, not &lt;code&gt;201&lt;/code&gt;. The &lt;code&gt;200 OK&lt;/code&gt; status code indicates that the request has succeeded. This is the correct response after the user has been deleted because we want to let the client know that their request was completed successfully but there is no payload to pass back to the client.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;201 Created&lt;/code&gt; status code signifies that the request has been fulfilled and resulted in a new resource being created. The response should contain a reference to the newly created resource. This status code is appropriate when completing a PUT request.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
    </section>
  </assessment>
</questestinterop>
