<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imsglobal.org/xsd/ims_qtiasiv1p2 http://www.imsglobal.org/xsd/ims_qtiasiv1p2p1.xsd">
  <objectbank ident="ga0d4845cfe90802ad5f0282ae3cac98d">
    <qtimetadata>
      <qtimetadatafield>
        <fieldlabel>bank_title</fieldlabel>
        <fieldentry>Module 3 - Express Middleware</fieldentry>
      </qtimetadatafield>
      <qtimetadatafield>
        <fieldlabel>bank_context_uuid</fieldlabel>
        <fieldentry>1KIACkAWdeyudBBWD32CbAAf7dGz5bMkBJbx4VVD</fieldentry>
      </qtimetadatafield>
    </qtimetadata>
    <item ident="g75d03c1e58ba5f4bf2d3a5d22218c2d3" title="0aff186e-fa0b-40dd-9cd4-42436aba746f">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>9847,4521,4894</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Based on your project today, how confident are you that you could &lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color: #e03e2d;"&gt;explain what middleware is and the different types&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt; in a project or interview tomorrow? &lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;Answer on a scale of 1 to 3 where 1 = not yet, 2 = confident, and 3 = I could go above and beyond.&lt;/span&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="9847">
              <material>
                <mattext texttype="text/plain">1</mattext>
              </material>
            </response_label>
            <response_label ident="4521">
              <material>
                <mattext texttype="text/plain">2</mattext>
              </material>
            </response_label>
            <response_label ident="4894">
              <material>
                <mattext texttype="text/plain">3</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">4521</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
    </item>
    <item ident="g76afeee147841417f69bb7ae19724a76" title="248ce206-d7ea-4951-a8e2-6034ec90d55a">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>898,4438,3393</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Based on your project today, how confident are you that you could &lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color: #e03e2d;"&gt;write custom middleware&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt; in a project or interview tomorrow? &lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;Answer on a scale of 1 to 3 where 1 = not yet, 2 = confident, and 3 = I could go above and beyond.&lt;/span&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="898">
              <material>
                <mattext texttype="text/plain">1</mattext>
              </material>
            </response_label>
            <response_label ident="4438">
              <material>
                <mattext texttype="text/plain">2</mattext>
              </material>
            </response_label>
            <response_label ident="3393">
              <material>
                <mattext texttype="text/plain">3</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">4438</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
    </item>
    <item ident="g5e66ece7df39d83bf21782d1c0b0e94a" title="252b40c3-b68b-4176-9991-18808a890bd9">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>8450,7046,2638,1601</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Choose the answer that best describes what is wrong with the logger middleware included below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;function logger(req, res, next) {
  const date = new Date();
  console.log(`
    REQUEST METHOD: ${req.method}
    REQUEST URL: ${req.originalUrl}
    TIMESTAMP: ${date.toLocaleString()}
  `);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="8450">
              <material>
                <mattext texttype="text/html">The &lt;code&gt;logger&lt;/code&gt; function never invokes the &lt;code&gt;next&lt;/code&gt; function.</mattext>
              </material>
            </response_label>
            <response_label ident="7046">
              <material>
                <mattext texttype="text/html">&lt;code&gt;new Date()&lt;/code&gt; returns a promise, so we need to use async-await in this function.</mattext>
              </material>
            </response_label>
            <response_label ident="2638">
              <material>
                <mattext texttype="text/plain">Instead of consoling out the data, we should be returning an object that includes all of this data.</mattext>
              </material>
            </response_label>
            <response_label ident="1601">
              <material>
                <mattext texttype="text/html">The &lt;code&gt;middleware&lt;/code&gt; decorator keyword needs to be added before the function to let express know that this is a middleware function.</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">7046</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="7046_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">2638</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="2638_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">1601</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="1601_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">8450</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Because the `logger` function never calls `next`, the logger middleware will console.log the first request but the request will hang and no response will ever be sent to the client.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="7046_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;code&gt;new Date()&lt;/code&gt; does not return a promise.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="2638_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">We do not use return statements in middleware functions. Instead, we need to either call the &lt;code&gt;next&lt;/code&gt; function which allows the next middleware function in the pipeline to execute, or we need to call a function on the &lt;code&gt;res&lt;/code&gt; object that will allow a response to be sent to the client.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="1601_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">There is no &lt;code&gt;middleware&lt;/code&gt; keyword that can be used in JavaScript or Express applications.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="g2c62c4b4f0e9cac05c1a30497de28a63" title="37318fa0-cc63-43a4-bc55-5038b80b7e63">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>8882,8915,4573,7847</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Choose the answer that best describes what is wrong with the route handler included below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;router.put('/:id', validateUserId, validateUser, async (req, res) =&amp;gt; {
  const user = await User.update(req.params.id, req.body);
  return user;
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="8882">
              <material>
                <mattext texttype="text/html">In order to resolve the request, the handler should use the &lt;code&gt;res&lt;/code&gt; object and send back a status and some json data, not use &lt;code&gt;return&lt;/code&gt; to send back the &lt;code&gt;user&lt;/code&gt; data.</mattext>
              </material>
            </response_label>
            <response_label ident="8915">
              <material>
                <mattext texttype="text/plain">When setting up the router, more than one middleware are passed in. This is not allowed; only one middleware can be set up per route.</mattext>
              </material>
            </response_label>
            <response_label ident="4573">
              <material>
                <mattext texttype="text/html">async should be put before &lt;code&gt;router.put&lt;/code&gt;, not before the arrow function.</mattext>
              </material>
            </response_label>
            <response_label ident="7847">
              <material>
                <mattext texttype="text/html">You cannot access the &lt;code&gt;id&lt;/code&gt; properly directly on the &lt;code&gt;req.params&lt;/code&gt; object. &lt;code&gt;id&lt;/code&gt; needs to be destructured from &lt;code&gt;req.params&lt;/code&gt; before calling &lt;code&gt;User.update&lt;/code&gt;.</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">8915</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="8915_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">4573</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="4573_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">7847</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="7847_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">8882</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">In order to resolve, a route handler needs to either call `next` to continue on in the middleware pipeline, or call a function on the `res` object.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="8915_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">This is not true. You can chain as many middleware as you like when setting up a route.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="4573_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">This is not true. The function where await is being is used is the arrow function, so the arrow function is the one that needs to be decorated with the async keyword.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="7847_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">This is not true. That would merely be a stylistic choice and both ways are fine.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="g3083a47d4654d3d69714e5719303597f" title="3e2d360d-2cf0-48be-b4fa-2278850e1820">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>1905,8972,677,4829</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;Which code snippet represents one way that you can check for an empty payload in a validation middleware?&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="1905">
              <material>
                <mattext texttype="text/html">&lt;code&gt;!req.body || Object.keys(req.body).length === 0&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="8972">
              <material>
                <mattext texttype="text/html">&lt;code&gt;!req.body || req.body.keys().length === 0&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="677">
              <material>
                <mattext texttype="text/html">&lt;code&gt;!req.body&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="4829">
              <material>
                <mattext texttype="text/html">&lt;code&gt;req.body.isEmpty()&lt;/code&gt;</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">8972</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="8972_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">677</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="677_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">4829</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="4829_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">1905</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">The `Object.keys()` method returns an array of a `req.body`'s own enumerable property names, iterated in the same order that a normal loop would. So, if the array's length is 0, that means `req.body` is an empty object.

`!req.body` checks if the body is undefined or falsy.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="8972_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">The &lt;code&gt;keys&lt;/code&gt; function is not available on the body object. The &lt;code&gt;keys&lt;/code&gt; function is a method available on the Object class, which is one of JavaScript's built-in data types.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="677_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">In JavaScript, an empty object is a truthy value. Therefore, this statement will resolve to true in a boolean context and we need a statement that will also check for empty objects.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="4829_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;code&gt;isEmpty&lt;/code&gt; is not a function that is available on the Object prototype.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="g7e7f5b8922cc1930cbf6b4f2ba98746e" title="5eca13ed-e3f2-4012-94f5-3e214b48ba24">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>9797,6562,8794,2830</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Given the following code, choose the answer that includes the code that is needed to use the &lt;code&gt;helmet&lt;/code&gt; middleware globally for all requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;const express = require("express");
const helmet = require("helmet");
const server = express();
// use helmet middleware globally
__________________;
server.get("/", (req, res) =&amp;gt; {
    res.status(200).json({ hello: "Lambda Llamas" });
});
module.exports = server;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="9797">
              <material>
                <mattext texttype="text/html">&lt;code&gt;server.use(helmet());&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="6562">
              <material>
                <mattext texttype="text/html">&lt;code&gt;express.use(helmet());&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="8794">
              <material>
                <mattext texttype="text/html">&lt;code&gt;server.set(helmet());&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="2830">
              <material>
                <mattext texttype="text/html">&lt;code&gt;server.global(helmet())&lt;/code&gt;</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">6562</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="6562_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">8794</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="8794_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">2830</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="2830_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">9797</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">The 'use' function found inside of the express object defines what global middleware we will use. In this case, we put the helmet method's invocation to be used as a piece of middleware.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="6562_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">In the code snippet provided, &lt;code&gt;express&lt;/code&gt; is the name for the express module that we required. When we use that module by invoking it with &lt;code&gt;express()&lt;/code&gt;, we assign the express application that is created to the variable &lt;code&gt;server&lt;/code&gt;.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="8794_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">Calling &lt;code&gt;set&lt;/code&gt; on the application is how we configure and modify the settings of the application. It is not how we set up middleware on the application.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="2830_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;code&gt;global&lt;/code&gt; is not a function that is available on the express application object.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="g39124e4bf95f41cd92bf80017bbb2989" title="9c521bbd-d69e-46d2-a56e-55b8deec077d">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>7922,7149,5320,3456</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;What is Express middleware used for?&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="7922">
              <material>
                <mattext texttype="text/plain">Extending the functionality of Express</mattext>
              </material>
            </response_label>
            <response_label ident="7149">
              <material>
                <mattext texttype="text/plain">Interacting with the file system via the Event Loop</mattext>
              </material>
            </response_label>
            <response_label ident="5320">
              <material>
                <mattext texttype="text/plain">Adding file hardware support to Express</mattext>
              </material>
            </response_label>
            <response_label ident="3456">
              <material>
                <mattext texttype="text/plain">Making Express more secure</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">7149</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="7149_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">5320</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="5320_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">3456</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="3456_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">7922</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Express middleware are functions that execute during the lifecycle of a request to the Express server. Each middleware has access to the HTTP request and response for each route (or path) it's attached to. In fact, Express itself is compromised wholly of middleware functions. By using and creating custom middleware functions we can easily keep our code DRY by writing one middleware function and using it in multiple routes on our application.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="7149_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Express middleware doesn't interact with system files using code that is run in chunks in a particular order (the Event Loop).</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="5320_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Express middleware does not control or do anything with hardware support.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="3456_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Express middleware doesn't make Express itself more secure, but it can improve your applications' security.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="g67c7d9664a8387192a027456f5df60a6" title="9cec7453-8232-43e3-bd2d-1a5ceb9ab4a7">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>7263,2250,6395,5302</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;What is the signature for a custom middleware function?&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="7263">
              <material>
                <mattext texttype="text/html">&lt;code&gt;function middleware (req, res, next) { /* implementation code here */ }&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="2250">
              <material>
                <mattext texttype="text/html">&lt;code&gt;function middleware (req, res) { /* implementation code here */ }&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="6395">
              <material>
                <mattext texttype="text/html">&lt;code&gt;function middleware (req, res, next, error) { /* implementation code here */ }&lt;/code&gt;</mattext>
              </material>
            </response_label>
            <response_label ident="5302">
              <material>
                <mattext texttype="text/html">&lt;code&gt;function middleware (error, next) { /* implementation code here */ }&lt;/code&gt;</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">2250</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="2250_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">6395</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="6395_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">5302</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="5302_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">7263</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Every middleware function needs to take in the request object (`req`), the response object (`res`), and the function called `next` by convention. By calling `next`, we allow express to continue moving through the pipeline of middleware functions until a function on the response object is invoked and the response is sent back to the client.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="2250_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">Middleware functions need to have a reference to the &lt;code&gt;next&lt;/code&gt; function so that they can allow the next function in the middleware pipeline to run. If &lt;code&gt;next&lt;/code&gt; is not invoked nor is a function on the response object, then the request cannot be resolved and the request will time out for the client.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="6395_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;p&gt;For error-handling middleware, the correct signature is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;function middleware (error, req, res, next) { /* implementation code here */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the first parameter is the error, not the last parameter.&lt;/p&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="5302_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">This signature correctly includes the &lt;code&gt;error&lt;/code&gt; as the first parameter and &lt;code&gt;next&lt;/code&gt; as the final parameter. However, the second and third parameters should be &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt;, in that order.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="gd888595a2cd14cf69749c993d8d02aae" title="9f6d2deb-7487-4c78-8c93-7934bbd0177b">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>1309,7646,6991,477</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;Is order relevant when it comes to using middleware?&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="1309">
              <material>
                <mattext texttype="text/plain">Yes</mattext>
              </material>
            </response_label>
            <response_label ident="7646">
              <material>
                <mattext texttype="text/plain">No</mattext>
              </material>
            </response_label>
            <response_label ident="6991">
              <material>
                <mattext texttype="text/plain">Only when using middleware globally</mattext>
              </material>
            </response_label>
            <response_label ident="477">
              <material>
                <mattext texttype="text/plain">Only when using middleware locally</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">7646</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="7646_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">6991</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="6991_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">477</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="477_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">1309</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Middleware runs in the order you have it set up, so it is possible to run middleware in an undesired sequence.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="7646_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Middleware runs in the order you have it set up, so it is possible to run middleware in an undesired sequence.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="6991_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">Global middleware's order is important, but so is any middleware you add to other locations such as endpoints.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="477_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">The middleware order matters whether the project is being worked on locally or is hosted on a server.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="g8625c69cd80eb3d29ce5213f83518f15" title="Module 3 - Express Middleware - rubric question 2">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>1822,8737,5432</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;Based on your sprint challenge, choose the description that most closely aligns with how well you can implement data validation&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="1822">
              <material>
                <mattext texttype="text/plain">Student does not validate data correctly</mattext>
              </material>
            </response_label>
            <response_label ident="8737">
              <material>
                <mattext texttype="text/plain">Student validates data according to the schema on ReadMe.  Validation may happen on route handlers or external functions. Use of middleware is not required.</mattext>
              </material>
            </response_label>
            <response_label ident="5432">
              <material>
                <mattext texttype="text/plain">Student validates data according to the schema on ReadMe using Middleware.</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">8737</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
    </item>
    <item ident="g4d64ce2eacf28e910d555063e685cd6a" title="f745cf70-8f01-4f81-97af-7610133a9bbc">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>2518,7992,2554,9089</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Choose the answer that best describes what is wrong with the route handler included below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt;router.post('/:id/posts', validateUserId, validatePost, (req, res) =&amp;gt; {
  Posts.insert(req.body)
    .then(post =&amp;gt; {
      res.status(201).json(post);
    })
    .catch(error =&amp;gt; {
      ...
    });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="2518">
              <material>
                <mattext texttype="text/html">Even though the route includes &lt;code&gt;id&lt;/code&gt; in the params, the &lt;code&gt;id&lt;/code&gt; is never used when inserting the new post. Thus, the new post will not be related to a user as it should be.</mattext>
              </material>
            </response_label>
            <response_label ident="7992">
              <material>
                <mattext texttype="text/plain">When setting up the router, more than one middleware are passed in. This is not allowed; only one middleware can be set up per route.</mattext>
              </material>
            </response_label>
            <response_label ident="2554">
              <material>
                <mattext texttype="text/plain">The status code should be 200, not 201.</mattext>
              </material>
            </response_label>
            <response_label ident="9089">
              <material>
                <mattext texttype="text/html">&lt;code&gt;req.params.id&lt;/code&gt; should be passed into &lt;code&gt;Posts.insert&lt;/code&gt;, not &lt;code&gt;req.body&lt;/code&gt;.</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <other/>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="general_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">7992</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="7992_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">2554</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="2554_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">9089</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="9089_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">2518</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="general_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">In order to include the `id` param that is included in the route path, we need to include that data in the post object that we are inserting into the posts table. Notice the `postData` object below for one way how we can do that.

```js
router.post('/:id/posts', validateUserId, validatePost, (req, res) =&amp;gt; {
  const postData = { ...req.body, user_id: req.params.id };

  Posts.insert(postData)
    .then(post =&amp;gt; {
      res.status(201).json(post);
    })
    .catch(error =&amp;gt; {
      res.status(500).json({
        message: 'We ran into an error creating the post',
        error: error.message,
      });
    });
});
```</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="7992_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">This is not true. You can chain as many middleware as you like when setting up a route.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="2554_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/plain">A 201 status code indicates that a request was successful and as a result, a resource has been created. In this case, we are successfully creating a new post, so 201 is the correct status code.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="9089_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">We actually need to use both &lt;code&gt;req.params.id&lt;/code&gt; and &lt;code&gt;req.body&lt;/code&gt; to create an object that has a &lt;code&gt;user_id&lt;/code&gt; and the post data passed in through &lt;code&gt;req.body&lt;/code&gt;.</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="gfda30af6e516ef99d6b57aec5aad2f5d" title="fd9922c9-29e6-4ef9-a31e-14a3a0d5ac5f">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>5186,7973,5233,9078</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;What is the use of the &lt;code&gt;next&lt;/code&gt; parameter in this middleware function?&lt;/p&gt;
&lt;pre&gt;&lt;code class="js language-js"&gt; function (req, res, next)
 { // code }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="5186">
              <material>
                <mattext texttype="text/plain">A function we can invoke to call the next middlware in the pipeline</mattext>
              </material>
            </response_label>
            <response_label ident="7973">
              <material>
                <mattext texttype="text/plain">A pointer to the next middleware in the pipeline</mattext>
              </material>
            </response_label>
            <response_label ident="5233">
              <material>
                <mattext texttype="text/plain">To handle the next request in the stack</mattext>
              </material>
            </response_label>
            <response_label ident="9078">
              <material>
                <mattext texttype="text/plain">To produce the response and send it to the client</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">5186</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
    </item>
  </objectbank>
</questestinterop>
