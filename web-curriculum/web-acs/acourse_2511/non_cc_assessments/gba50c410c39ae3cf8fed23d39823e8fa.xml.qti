<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imsglobal.org/xsd/ims_qtiasiv1p2 http://www.imsglobal.org/xsd/ims_qtiasiv1p2p1.xsd">
  <objectbank ident="gba50c410c39ae3cf8fed23d39823e8fa">
    <qtimetadata>
      <qtimetadatafield>
        <fieldlabel>bank_title</fieldlabel>
        <fieldentry>Sprint 19/31 Sorting II</fieldentry>
      </qtimetadatafield>
      <qtimetadatafield>
        <fieldlabel>bank_context_uuid</fieldlabel>
        <fieldentry>Vflisirdb2Bqm6W61vdGSJDFOFPtMqHUhbPgCsN7</fieldentry>
      </qtimetadatafield>
    </qtimetadata>
    <item ident="g10ff6180c0468a7c11e2573540502131" title="Question">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>5622,9099,1391,6081</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;In what circumstances might an Insertion Sort be faster than Quicksort?&lt;/span&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="5622">
              <material>
                <mattext texttype="text/plain">When there are very few values to sort.</mattext>
              </material>
            </response_label>
            <response_label ident="9099">
              <material>
                <mattext texttype="text/plain">When there are a lot of values to sort.</mattext>
              </material>
            </response_label>
            <response_label ident="1391">
              <material>
                <mattext texttype="text/plain">When there is more memory available for both sorts.</mattext>
              </material>
            </response_label>
            <response_label ident="6081">
              <material>
                <mattext texttype="text/plain">When there is a faster CPU available for both sorts.</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">9099</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="9099_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">1391</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="1391_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">6081</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="6081_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">5622</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="9099_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Quicksort's O(n log n) rapidly outpaces Insertion Sort's O(n&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span&gt;2&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span&gt;) if there are a large number of elements.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="1391_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Quicksort will use more memory, but time complexity is unaffected.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="6081_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Both sorts would run faster in this case for no relatively gain or loss.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="gb6f774ce773618fde5b03d8dd11c2990" title="Question">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>7267,7378,1616,311</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Quicksort and Merge Sort use a strategy called:&lt;/span&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="7267">
              <material>
                <mattext texttype="text/plain">Divide and conquer</mattext>
              </material>
            </response_label>
            <response_label ident="7378">
              <material>
                <mattext texttype="text/plain">Top-down dynamic programming</mattext>
              </material>
            </response_label>
            <response_label ident="1616">
              <material>
                <mattext texttype="text/plain">Bottom-up dynamic programming</mattext>
              </material>
            </response_label>
            <response_label ident="311">
              <material>
                <mattext texttype="text/plain">Linear processing</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">7378</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="7378_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">1616</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="1616_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">311</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="311_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">7267</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="7378_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Dynamic Programming is a technique used where the subproblems are dependent. Quicksort and Merge Sort work on independent subproblems.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="1616_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Dynamic Programming is a technique used where the subproblems are dependent. Quicksort and Merge Sort work on independent subproblems.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="311_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;This is not relevant to sorting.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
    <item ident="ge572b39252b432a34b30bf7ddab72ab9" title="Question">
      <itemmetadata>
        <qtimetadata>
          <qtimetadatafield>
            <fieldlabel>question_type</fieldlabel>
            <fieldentry>multiple_choice_question</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>points_possible</fieldlabel>
            <fieldentry>1.0</fieldentry>
          </qtimetadatafield>
          <qtimetadatafield>
            <fieldlabel>original_answer_ids</fieldlabel>
            <fieldentry>1030,9983,1930,7132</fieldentry>
          </qtimetadatafield>
        </qtimetadata>
      </itemmetadata>
      <presentation>
        <material>
          <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Recursion is a useful tool with Quicksort and Merge Sort because&lt;/span&gt;&lt;/div&gt;</mattext>
        </material>
        <response_lid ident="response1" rcardinality="Single">
          <render_choice>
            <response_label ident="1030">
              <material>
                <mattext texttype="text/plain">The sorts are made up of similar, independent subproblems</mattext>
              </material>
            </response_label>
            <response_label ident="9983">
              <material>
                <mattext texttype="text/plain">It changes the sort from O(n2) to O(n log n)</mattext>
              </material>
            </response_label>
            <response_label ident="1930">
              <material>
                <mattext texttype="text/plain">It makes them sort faster than an iterative algorithm</mattext>
              </material>
            </response_label>
            <response_label ident="7132">
              <material>
                <mattext texttype="text/plain">It uses less memory than an iterative algorithm</mattext>
              </material>
            </response_label>
          </render_choice>
        </response_lid>
      </presentation>
      <resprocessing>
        <outcomes>
          <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
        </outcomes>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">9983</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="9983_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">1930</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="1930_fb"/>
        </respcondition>
        <respcondition continue="Yes">
          <conditionvar>
            <varequal respident="response1">7132</varequal>
          </conditionvar>
          <displayfeedback feedbacktype="Response" linkrefid="7132_fb"/>
        </respcondition>
        <respcondition continue="No">
          <conditionvar>
            <varequal respident="response1">1030</varequal>
          </conditionvar>
          <setvar action="Set" varname="SCORE">100</setvar>
        </respcondition>
      </resprocessing>
      <itemfeedback ident="9983_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Recursive versus iterative need not have an impact on time complexity.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="1930_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Because of the overhead of function calls, it might actually be slower than the iterative solution.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
      <itemfeedback ident="7132_fb">
        <flow_mat>
          <material>
            <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Because of the overhead of function calls, it might actually use more space than the iterative solution.&lt;/span&gt;&lt;/i&gt;</mattext>
          </material>
        </flow_mat>
      </itemfeedback>
    </item>
  </objectbank>
</questestinterop>
