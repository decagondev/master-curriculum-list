<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imsglobal.org/xsd/ims_qtiasiv1p2 http://www.imsglobal.org/profile/cc/ccv1p1/ccv1p1_qtiasiv1p2p1_v1p0.xsd">
  <assessment ident="gc5582ba4673d529db1f6a1cf546b4677" title="Sprint 19 Check for Understanding">
    <qtimetadata>
      <qtimetadatafield>
        <fieldlabel>cc_profile</fieldlabel>
        <fieldentry>cc.exam.v0p1</fieldentry>
      </qtimetadatafield>
      <qtimetadatafield>
        <fieldlabel>qmd_assessmenttype</fieldlabel>
        <fieldentry>Examination</fieldentry>
      </qtimetadatafield>
      <qtimetadatafield>
        <fieldlabel>qmd_scoretype</fieldlabel>
        <fieldentry>Percentage</fieldentry>
      </qtimetadatafield>
      <qtimetadatafield>
        <fieldlabel>cc_maxattempts</fieldlabel>
        <fieldentry>unlimited</fieldentry>
      </qtimetadatafield>
    </qtimetadata>
    <section ident="root_section">
      <item ident="g74909cf1b30634bb1546a33a77aadb54" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.true_false.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Hash tables allow for duplicate keys.&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="4153">
                <material>
                  <mattext texttype="text/plain">True</mattext>
                </material>
              </response_label>
              <response_label ident="4303">
                <material>
                  <mattext texttype="text/plain">False</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">4153</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="4153_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">4303</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="4153_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span&gt;Keys must be unique in a hash table. Reassigning to the same key overwrites the old value at that key.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g0ab1fd38133842eab61fac0f75769f04" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;By running the key through a hashing function, hash tables are able to achieve an average case access time complexity over the number of elements in the table of:&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="2117">
                <material>
                  <mattext texttype="text/plain">O(1)</mattext>
                </material>
              </response_label>
              <response_label ident="2077">
                <material>
                  <mattext texttype="text/plain">O(log n)</mattext>
                </material>
              </response_label>
              <response_label ident="8480">
                <material>
                  <mattext texttype="text/plain">O(n)</mattext>
                </material>
              </response_label>
              <response_label ident="4057">
                <material>
                  <mattext texttype="text/plain">O(n2)</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">2077</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="2077_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">8480</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="8480_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">4057</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="4057_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">2117</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="2077_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span&gt;The hashing function doesn't have to process elements; it just has to process the key.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="8480_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;The hashing function doesn't have to process elements; it just has to process the key.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="4057_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;The hashing function doesn't have to process elements; it just has to process the key.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="gac5b6456a95c163fde92e82f930ec643" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Behind the scenes, most hash tables store values in:&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="4868">
                <material>
                  <mattext texttype="text/plain">An array</mattext>
                </material>
              </response_label>
              <response_label ident="587">
                <material>
                  <mattext texttype="text/plain">A binary tree</mattext>
                </material>
              </response_label>
              <response_label ident="6555">
                <material>
                  <mattext texttype="text/plain">A linked list</mattext>
                </material>
              </response_label>
              <response_label ident="7677">
                <material>
                  <mattext texttype="text/plain">A graph</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">587</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="587_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">6555</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="6555_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">7677</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="7677_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">4868</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="587_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span&gt;Though a binary tree has good time complexity characteristics, hash tables have better ones.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="6555_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span&gt;A linked list doesn't allow random access, so it can't look up values in O(1) time.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="7677_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span&gt;A graph is an unnecessarily-complex and inappropriate data structure to use for this purpose.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g86108bb184a5df8729d327793ffbfcce" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;What is the average time complexity of sorts like Bubble Sort and Insertion Sort?&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="7315">
                <material>
                  <mattext texttype="text/plain">O(n2)</mattext>
                </material>
              </response_label>
              <response_label ident="2205">
                <material>
                  <mattext texttype="text/plain">O(1)</mattext>
                </material>
              </response_label>
              <response_label ident="5460">
                <material>
                  <mattext texttype="text/plain">O(n)</mattext>
                </material>
              </response_label>
              <response_label ident="8588">
                <material>
                  <mattext texttype="text/plain">O(n log n)</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">2205</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="2205_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">5460</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="5460_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">8588</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="8588_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">7315</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="2205_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Only a sort over a hard-coded number of elements can work in constant time. Anything that supports a variable number of elements cannot be constant time.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="5460_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Some specialized non-comparison sorts like Count Sort operate in linear time. But no general-purpose comparison sorts do.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="8588_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Some divide-and-conquer sorts like Quicksort operate in O(n log n) time, but Bubble Sort and Insertion Sort are not divide-and-conquer.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g3b3df8e25ea7fa5d1bd429467bd95f5c" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;In what case does Bubble Sort outperform a basic Quicksort?&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="9347">
                <material>
                  <mattext texttype="text/plain">When the input array is already sorted.</mattext>
                </material>
              </response_label>
              <response_label ident="6454">
                <material>
                  <mattext texttype="text/plain">When the input array is already sorted in reverse.</mattext>
                </material>
              </response_label>
              <response_label ident="634">
                <material>
                  <mattext texttype="text/plain">When the input array is very large.</mattext>
                </material>
              </response_label>
              <response_label ident="1148">
                <material>
                  <mattext texttype="text/plain">When the input array is empty.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">6454</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="6454_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">634</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="634_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1148</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1148_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">9347</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="6454_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span&gt;Bubble Sort and Quicksort are equally bad in this case at O(n&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span&gt;2&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span&gt;).&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="634_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Quicksort is definitely better with large arrays.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1148_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Bubble Sort and Quicksort will complete this equally quickly.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g84914847b4d2fda9cd2f24de3f6f7a56" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;For each pass through the array with Insertion sort or Bubble Sort, how many more elements are placed in their final position?&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="1199">
                <material>
                  <mattext texttype="text/plain">1</mattext>
                </material>
              </response_label>
              <response_label ident="3037">
                <material>
                  <mattext texttype="text/plain">2</mattext>
                </material>
              </response_label>
              <response_label ident="9045">
                <material>
                  <mattext texttype="text/plain">4</mattext>
                </material>
              </response_label>
              <response_label ident="8527">
                <material>
                  <mattext texttype="text/plain">Twice as many as on the previous pass.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">3037</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="3037_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">9045</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="9045_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">8527</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="8527_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">1199</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="3037_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Each pass through Bubble Sort only bubbles one element to its final position.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="9045_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Each pass through Bubble Sort only bubbles one element to its final position.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="8527_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;You're thinking of a divide-and-conquer sort like Quicksort or Merge Sort. Each pass through Bubble Sort only bubbles one element to its final position.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g4e748655066f9cd4a64b20bb00186527" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Sorting the data ahead of time with an O(n log n) sort is worth it if:&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="5900">
                <material>
                  <mattext texttype="text/plain">You're going to be processing the data repeatedly and you get a time complexity benefit from having sorted data.</mattext>
                </material>
              </response_label>
              <response_label ident="6432">
                <material>
                  <mattext texttype="text/plain">You're going to be processing the data once and you want the time complexity benefit from having sorted data.</mattext>
                </material>
              </response_label>
              <response_label ident="6194">
                <material>
                  <mattext texttype="text/plain">It's always worth it.</mattext>
                </material>
              </response_label>
              <response_label ident="8242">
                <material>
                  <mattext texttype="text/plain">It's never worth it.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">6432</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="6432_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">6194</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="6194_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">8242</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="8242_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">5900</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="6432_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Since sorting the data takes O(n log n) time, you're unlikely to realize enough savings in your single pass to make up that time.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="6194_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;&amp;nbsp;It's more likely worth it if you are going to be repeatedly processing the data and sorting gives you some time complexity benefit while doing so.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="8242_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;p&gt;&lt;i&gt;&lt;span&gt;It's more likely worth it if you are going to be repeatedly processing the data and sorting gives you some time complexity benefit while doing so.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g10ff6180c0468a7c11e2573540502131" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;In what circumstances might an Insertion Sort be faster than Quicksort?&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="5622">
                <material>
                  <mattext texttype="text/plain">When there are very few values to sort.</mattext>
                </material>
              </response_label>
              <response_label ident="9099">
                <material>
                  <mattext texttype="text/plain">When there are a lot of values to sort.</mattext>
                </material>
              </response_label>
              <response_label ident="1391">
                <material>
                  <mattext texttype="text/plain">When there is more memory available for both sorts.</mattext>
                </material>
              </response_label>
              <response_label ident="6081">
                <material>
                  <mattext texttype="text/plain">When there is a faster CPU available for both sorts.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">9099</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="9099_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1391</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1391_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">6081</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="6081_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">5622</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="9099_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Quicksort's O(n log n) rapidly outpaces Insertion Sort's O(n&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span&gt;2&lt;/span&gt;&lt;/i&gt;&lt;i&gt;&lt;span&gt;) if there are a large number of elements.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1391_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Quicksort will use more memory, but time complexity is unaffected.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="6081_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Both sorts would run faster in this case for no relatively gain or loss.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="gb6f774ce773618fde5b03d8dd11c2990" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Quicksort and Merge Sort use a strategy called:&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="7267">
                <material>
                  <mattext texttype="text/plain">Divide and conquer</mattext>
                </material>
              </response_label>
              <response_label ident="7378">
                <material>
                  <mattext texttype="text/plain">Top-down dynamic programming</mattext>
                </material>
              </response_label>
              <response_label ident="1616">
                <material>
                  <mattext texttype="text/plain">Bottom-up dynamic programming</mattext>
                </material>
              </response_label>
              <response_label ident="311">
                <material>
                  <mattext texttype="text/plain">Linear processing</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">7378</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="7378_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1616</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1616_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">311</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="311_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">7267</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="7378_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Dynamic Programming is a technique used where the subproblems are dependent. Quicksort and Merge Sort work on independent subproblems.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1616_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Dynamic Programming is a technique used where the subproblems are dependent. Quicksort and Merge Sort work on independent subproblems.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="311_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;This is not relevant to sorting.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="ge572b39252b432a34b30bf7ddab72ab9" title="Question">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>cc_profile</fieldlabel>
              <fieldentry>cc.multiple_choice.v0p1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;span&gt;Recursion is a useful tool with Quicksort and Merge Sort because&lt;/span&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="1030">
                <material>
                  <mattext texttype="text/plain">The sorts are made up of similar, independent subproblems</mattext>
                </material>
              </response_label>
              <response_label ident="9983">
                <material>
                  <mattext texttype="text/plain">It changes the sort from O(n2) to O(n log n)</mattext>
                </material>
              </response_label>
              <response_label ident="1930">
                <material>
                  <mattext texttype="text/plain">It makes them sort faster than an iterative algorithm</mattext>
                </material>
              </response_label>
              <response_label ident="7132">
                <material>
                  <mattext texttype="text/plain">It uses less memory than an iterative algorithm</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">9983</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="9983_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">1930</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="1930_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <varequal respident="response1">7132</varequal>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="7132_fb"/>
          </respcondition>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">1030</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="9983_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Recursive versus iterative need not have an impact on time complexity.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="1930_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Because of the overhead of function calls, it might actually be slower than the iterative solution.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="7132_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;i&gt;&lt;span&gt;Because of the overhead of function calls, it might actually use more space than the iterative solution.&lt;/span&gt;&lt;/i&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
    </section>
  </assessment>
</questestinterop>
